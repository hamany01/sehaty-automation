{
  "name": "Sehaty ‚Äì Core Bridge (Telegram + GAS)",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "id": "CronEvery1Min",
      "name": "Cron - Every 1 min",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 2,
      "position": [
        260,
        260
      ]
    },
    {
      "parameters": {
        "mode": "json",
        "json": {
          "WEB_APP_URL": "https://script.google.com/macros/s/AKfycbyMMrw-upBPv6Jodaa2yXBvdqt1SPe68Gg0s3MVUMgvLanrMPqweiZcNBN1dQqIqUwJ0g/exec",
          "WEB_APP_SECRET": "SEHATY_MH51sl7I9jHb0XugAGwlvksMAbOml6SyUTppzxHJ7mJxMnth",
          "TELEGRAM_BOT_TOKEN": "8294498979:AAFgyGlclrZdhustT-4hVWiURuFAbCXZXls",
          "TIMEZONE": "Asia/Riyadh"
        },
        "options": {
          "keepOnlySet": false
        }
      },
      "id": "SetConfig",
      "name": "Set - Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        520,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "if (!$json.TELEGRAM_BOT_TOKEN) {\n  throw new Error('TELEGRAM_BOT_TOKEN ŸÖŸÅŸÇŸàÿØ ŸÖŸÜ Set - Config');\n}\nreturn items;"
      },
      "id": "AssertToken",
      "name": "Function - Assert Token",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        770,
        260
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ 'https://api.telegram.org/bot' + $json.TELEGRAM_BOT_TOKEN + '/deleteWebhook' }}",
        "responseFormat": "json",
        "options": {
          "timeout": 300000
        }
      },
      "id": "TGDeleteWebhook",
      "name": "Telegram - deleteWebhook (once)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1020,
        260
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ 'https://api.telegram.org/bot' + $items('Set - Config',0,0)[0].json.TELEGRAM_BOT_TOKEN + '/getUpdates' }}",
        "responseFormat": "json",
        "options": {
          "timeout": 60000
        }
      },
      "id": "TGGetUpdates",
      "name": "Telegram - getUpdates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1270,
        260
      ]
    },
    {
      "parameters": {
        "functionCode": "// Ÿäÿ™ŸàŸÇÿπ items[0].json = ŸÜÿ™Ÿäÿ¨ÿ© getUpdates\nconst res = items[0]?.json;\nif (!res || res.ok === false) return [];\n\nconst out = [];\nfor (const u of (res.result || [])) {\n  const m = u.message || u.channel_post || u.edited_message || u.edited_channel_post;\n  if (!m) continue;\n\n  const text = (m.text || m.caption || '').trim();\n  const photos = Array.isArray(m.photo) ? m.photo : [];\n  const file_id = photos.length ? photos[photos.length - 1].file_id : null;\n\n  out.push({\n    json: {\n      update_id: u.update_id,\n      chat_id: m.chat.id,\n      message_id: m.message_id,\n      date: m.date,\n      text,\n      has_photo: !!file_id,\n      file_id\n    }\n  });\n}\nreturn out;"
      },
      "id": "ParseUpdates",
      "name": "Function ‚Äì Parse Updates",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1520,
        260
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"text\"]}}",
              "operation": "equals",
              "value2": "/start"
            }
          ]
        }
      },
      "id": "IfIsStart",
      "name": "IF - is /start",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1770,
        260
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $items('Set - Config',0,0)[0].json.WEB_APP_URL }}",
        "jsonParameters": true,
        "options": {
          "timeout": 60000
        },
        "bodyParametersJson": "={{ JSON.stringify({ key: $items('Set - Config',0,0)[0].json.WEB_APP_SECRET, action: 'upsertSetting', kv: { ALERTS_CHAT_ID: $json.chat_id } }) }}"
      },
      "id": "GASSaveChat",
      "name": "GAS - Save ALERTS_CHAT_ID",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2020,
        160
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ 'https://api.telegram.org/bot' + $items('Set - Config',0,0)[0].json.TELEGRAM_BOT_TOKEN + '/sendMessage?chat_id=' + $json.chat_id + '&text=' + encodeURIComponent('‚úÖ ÿ™ŸÖ ÿ±ÿ®ÿ∑ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠. ÿßŸÑÿ¢ŸÜ ÿßÿ≥ÿ™ŸÇÿ®ŸÑÿ™ ÿ£ŸÖÿ±ŸÉ /start') }}",
        "responseFormat": "json",
        "options": {
          "timeout": 60000
        }
      },
      "id": "TGSendAck",
      "name": "Telegram - sendMessage (ack)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2270,
        160
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ 'https://api.telegram.org/bot' + $items('Set - Config',0,0)[0].json.TELEGRAM_BOT_TOKEN + '/sendMessage?chat_id=' + $json.chat_id + '&text=' + encodeURIComponent('üëã ÿ£ÿ±ÿ≥ŸÑ /start ŸÑÿ±ÿ®ÿ∑ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™ÿå ÿ£Ÿà ÿ£ÿ±ÿ≥ŸÑ ÿ£Ÿä ŸÇÿ±ÿßÿ°ÿ©/ÿµŸàÿ±ÿ© Ÿàÿ≥ÿ£ÿ™ŸàŸÑŸâ ÿßŸÑŸÖÿπÿßŸÑÿ¨ÿ©.') }}",
        "responseFormat": "json",
        "options": {
          "timeout": 60000
        }
      },
      "id": "TGSendHelp",
      "name": "Telegram - sendMessage (help)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2020,
        360
      ]
    }
  ],
  "connections": {
    "Cron - Every 1 min": {
      "main": [
        [
          {
            "node": "Set - Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set - Config": {
      "main": [
        [
          {
            "node": "Function - Assert Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Assert Token": {
      "main": [
        [
          {
            "node": "Telegram - deleteWebhook (once)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - deleteWebhook (once)": {
      "main": [
        [
          {
            "node": "Telegram - getUpdates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - getUpdates": {
      "main": [
        [
          {
            "node": "Function ‚Äì Parse Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function ‚Äì Parse Updates": {
      "main": [
        [
          {
            "node": "IF - is /start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF - is /start": {
      "main": [
        [
          {
            "node": "GAS - Save ALERTS_CHAT_ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram - sendMessage (help)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GAS - Save ALERTS_CHAT_ID": {
      "main": [
        [
          {
            "node": "Telegram - sendMessage (ack)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "timezone": "Asia/Riyadh"
  },
  "pinData": {}
}
