{
  "name": "Sehaty – Core (Telegram + GAS) – v1",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "id": "n1",
      "name": "Cron - Every 1 min",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [ -1200, -100 ]
    },
    {
      "parameters": {
        "mode": "json",
        "jsonParameters": true,
        "options": {
          "setAllData": false
        },
        "values": {
          "json": [
            {
              "name": "WEB_APP_URL",
              "value": "https://script.google.com/macros/s/AKfycbyMMrw-upBPv6Jodaa2yXBvdqt1SPe68Gg0s3MVUMgvLanrMPqweiZcNBN1dQqIqUwJ0g/exec"
            },
            {
              "name": "WEB_APP_SECRET",
              "value": "SEHATY_MH51sl7I9jHb0XugAGwlvksMAbOml6SyUTppzxHJ7mJxMnth"
            },
            {
              "name": "TELEGRAM_BOT_TOKEN",
              "value": "8294498979:AAFgyGlclrZdhustT-4hVWiURuFAbCXZXls"
            },
            {
              "name": "TIMEZONE",
              "value": "Asia/Riyadh"
            }
          ]
        }
      },
      "id": "n2",
      "name": "Set - Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [ -980, -100 ]
    },
    {
      "parameters": {
        "functionCode": "const data = getWorkflowStaticData('global');\nif (typeof data.last_update_id !== 'number') data.last_update_id = 0;\nreturn [{ json: { last_update_id: data.last_update_id } }];"
      },
      "id": "n3",
      "name": "Function - Get State",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [ -770, -100 ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "join": "combine"
      },
      "id": "n4",
      "name": "Merge (Config + State)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [ -560, -100 ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.telegram.org/bot' + $json.TELEGRAM_BOT_TOKEN + '/deleteWebhook' }}",
        "options": {
          "ignoreResponseCode": true,
          "responseFormat": "json",
          "timeout": 300000
        }
      },
      "id": "n5",
      "name": "Telegram - deleteWebhook (once)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -350, -210 ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.telegram.org/bot' + $json.TELEGRAM_BOT_TOKEN + '/getUpdates' }}",
        "queryParametersUi": {
          "parameter": [
            {
              "name": "offset",
              "value": "={{ ($json.last_update_id || 0) + 1 }}"
            },
            {
              "name": "allowed_updates",
              "value": "[\"message\", \"edited_message\", \"channel_post\", \"edited_channel_post\"]"
            }
          ]
        },
        "options": {
          "responseFormat": "json",
          "timeout": 60000
        }
      },
      "id": "n6",
      "name": "Telegram - getUpdates",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -350, -10 ]
    },
    {
      "parameters": {
        "functionCode": "// expects items[0].json from getUpdates\nconst res = items[0]?.json;\nif (!res || res.ok === false) return [];\nconst data = getWorkflowStaticData('global');\nlet maxId = data.last_update_id || 0;\nconst out = [];\nfor (const u of (res.result || [])) {\n  if (typeof u.update_id === 'number' && u.update_id > maxId) maxId = u.update_id;\n  const m = u.message || u.channel_post || u.edited_message || u.edited_channel_post;\n  if (!m) continue;\n  const text = (m.text || m.caption || '').trim();\n  const photos = Array.isArray(m.photo) ? m.photo : [];\n  const file_id = photos.length ? photos[photos.length - 1].file_id : null;\n  out.push({ json: { chat_id: m.chat?.id, message_id: m.message_id, text, has_photo: !!file_id, file_id } });\n}\ndata.last_update_id = maxId;\nreturn out;"
      },
      "id": "n7",
      "name": "Function - Parse Updates",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [ -120, -10 ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.telegram.org/bot' + $items('Merge (Config + State)', 0, 0)[0].json.TELEGRAM_BOT_TOKEN + '/sendMessage' }}",
        "options": {
          "responseFormat": "json",
          "timeout": 60000
        },
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { chat_id: $json.chat_id, text: 'تم الربط ✅\\n(نصك): ' + ($json.text || 'بدون نص') } }}"
      },
      "id": "n8",
      "name": "Telegram - sendMessage (echo)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ 140, -10 ]
    },
    {
      "parameters": {},
      "id": "n9",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [ -1200, 220 ]
    },
    {
      "parameters": {
        "url": "={{ $items('Set - Config', 0, 0)[0].json.WEB_APP_URL + '?key=' + encodeURIComponent($items('Set - Config', 0, 0)[0].json.WEB_APP_SECRET) + '&action=read&range=Vitals!A:H' }}",
        "options": {
          "responseFormat": "json",
          "timeout": 60000
        }
      },
      "id": "n10",
      "name": "GAS - Read Vitals (test)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -980, 220 ]
    },
    {
      "parameters": {
        "url": "={{ $items('Set - Config', 0, 0)[0].json.WEB_APP_URL }}",
        "options": {
          "responseFormat": "json",
          "timeout": 60000
        },
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ { key: $items('Set - Config',0,0)[0].json.WEB_APP_SECRET, action: 'appendByHeaders', sheet: 'Workout', row: { التاريخ: new Date().toISOString(), نوع: 'اختبار', الشدة: 'متوسط', 'المدة(د)': 10, 'سعرات مقدَّرة': 50, ملاحظات: 'from n8n test' } } }}"
      },
      "id": "n11",
      "name": "GAS - Append Workout (test)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [ -740, 220 ]
    }
  ],
  "connections": {
    "Cron - Every 1 min": {
      "main": [
        [
          { "node": "Set - Config", "type": "main", "index": 0 }
        ]
      ]
    },
    "Set - Config": {
      "main": [
        [
          { "node": "Function - Get State", "type": "main", "index": 0 },
          { "node": "GAS - Read Vitals (test)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Function - Get State": {
      "main": [
        [
          { "node": "Merge (Config + State)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Merge (Config + State)": {
      "main": [
        [
          { "node": "Telegram - deleteWebhook (once)", "type": "main", "index": 0 },
          { "node": "Telegram - getUpdates", "type": "main", "index": 0 }
        ]
      ]
    },
    "Telegram - getUpdates": {
      "main": [
        [
          { "node": "Function - Parse Updates", "type": "main", "index": 0 }
        ]
      ]
    },
    "Function - Parse Updates": {
      "main": [
        [
          { "node": "Telegram - sendMessage (echo)", "type": "main", "index": 0 }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          { "node": "Set - Config", "type": "main", "index": 0 }
        ]
      ]
    },
    "GAS - Read Vitals (test)": {
      "main": [
        [
          { "node": "GAS - Append Workout (test)", "type": "main", "index": 0 }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {},
  "staticData": {},
  "version": 2
}
